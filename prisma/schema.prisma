generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model activation_keys {
  key_hash      String  @id
  created_time  String
  password_hash String
  email         String
  username      String
  newsletter    Boolean @default(false)
}

model admins {
  person String @id
  people people @relation(fields: [person], references: [id])
}

model course_cohorts {
  start_date        String
  facilitator       String
  completed         String?
  live              Boolean             @default(false)
  course            Int
  category_id       Int                 @unique
  name              String
  id                Int                 @default(autoincrement()) @id
  group_id          Int
  courses           courses             @relation(fields: [course], references: [id])
  people            people              @relation(fields: [facilitator], references: [id])
  people_in_cohorts people_in_cohorts[]
}

model course_invites {
  email   String
  course  Int
  courses courses @relation(fields: [course], references: [id])

  @@id([course, email])
}

model course_maintainers {
  maintainer String
  course     Int
  courses    courses @relation(fields: [course], references: [id])
  people     people  @relation(fields: [maintainer], references: [id])

  @@id([course, maintainer])
}

model courses {
  description             String
  cost                    Float
  name                    String
  duration                String
  category_id             Int
  prerequisites           String
  invite_only             Boolean                   @default(false)
  status                  course_status             @default(draft)
  slug                    String                    @unique
  id                      Int                       @default(autoincrement()) @id
  maintainer_group        Int                       @unique
  cohort_max_size         Int                       @default(0)
  card_image              String                    @default("/img/new_course.png")
  course_cohorts          course_cohorts[]
  course_invites          course_invites[]
  course_maintainers      course_maintainers[]
  course_templates        course_templates[]
  people_watching_courses people_watching_courses[]
}

model course_templates {
  content  String
  name     String
  type     template_types @default(prepopulated)
  title    String
  required Boolean?       @default(false)
  course   Int
  courses  courses        @relation(fields: [course], references: [id])

  @@id([name, course])
}

model password_reset_keys {
  key_hash     String @id
  created_time String
  email        String
}

model people {
  id                      String                    @id
  email                   String                    @unique
  display_name            String?
  password_hash           String                    @unique
  username                String                    @unique
  bio                     String?
  link                    String?
  admins                  admins[]
  course_cohorts          course_cohorts[]
  course_maintainers      course_maintainers[]
  people_in_cohorts       people_in_cohorts[]
  people_watching_courses people_watching_courses[]
}

model people_in_cohorts {
  person         String
  cohort         Int
  course_cohorts course_cohorts @relation(fields: [cohort], references: [id])
  people         people         @relation(fields: [person], references: [id])

  @@id([person, cohort])
}

model people_watching_courses {
  person  String
  course  Int
  courses courses @relation(fields: [course], references: [id])
  people  people  @relation(fields: [person], references: [id])

  @@id([course, person])
}

enum course_status {
  draft
  live
}

enum template_types {
  prepopulated
  triggered
}
